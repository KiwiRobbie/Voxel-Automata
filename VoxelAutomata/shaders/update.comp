#version 460 core
layout(local_size_x = 1, local_size_y = 1,local_size_z = 1) in;


struct VtxData {
   vec3  pos;
   float state;   
};   

layout (std140, binding = 1) buffer VertexBuffer {
   VtxData verts[];
};
layout (std140, binding = 2) buffer OutputBuffer {
   VtxData result[];
};


uniform float time;
uniform bool swapped;

uint getIndex(vec3 location)
{
	vec3 size = gl_NumWorkGroups.xyz;
	return int(location.x + size.x*location.y + size.x*size.y*location.z);
}

void main() {
	vec3 loc =  gl_GlobalInvocationID.xyz;
	vec3 size = gl_NumWorkGroups.xyz;
	int index = int(loc.x + size.x*loc.y + size.x*size.y*loc.z);
	result[index].pos=verts[index].pos;
	
	float sum = 0;
	for(int x = -1;x<2;x++)
	{
		for(int y = -1;y<2;y++)
		{
			for(int z = -1;z<2;z++)
			{
				sum+=verts[getIndex(loc+vec3(x,y,z))].state;
			}
		}
	}
	float cell=round(verts[index].state);
	sum=round(sum);
	result[index].state=float( sum==3 || (sum==2&&cell==1) );
	//result[index].state=verts[index].state;
}